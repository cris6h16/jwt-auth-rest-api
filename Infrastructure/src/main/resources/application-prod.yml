spring:
  application:
    name: restful-api-jwt

  datasource:
    url: jdbc:postgresql://${PSQL_URL}
    driver-class-name: org.postgresql.Driver
    username: ${PSQL_USER}
    password: ${PSQL_PASS}
    hikari:
      schema: public
#      maximum-pool-size: 20
#      minimum-idle: 5
#      idle-timeout: 30000
#      connection-timeout: 20000
#      leak-detection-threshold: 15000

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: update # todo: in docker file make a stage for create, later update for prod
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  mail:
    host: smtp.gmail.com
    port: 465
    username: ${MAIL_USER}
    password: ${MAIL_PASS}
    protocol: smtp
    properties:
      mail:
        smtp:
          ssl:
            enable: true
            trust: smtp.gmail.com
            checkserveridentity: true
        debug: false
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

server:
  port: 8080
  error:
    include-message: never
    include-exception: off
    include-stacktrace: never
  ssl:
    key-store: classpath:cris6h16.p12
    key-store-password: ${KEY_STORE_PASS}
    key-store-type: PKCS12
    key-alias: cris6h16
    enabled: true
  compression:
    enabled: true
    mime-types: application/json
    min-response-size: 2048

logging:
  level:
    root: INFO
  file:
    path: /var/log/restful-api-jwt.log


jwt:
  secret:
    key: 123456789987654321123456789987654321123456789
  token:
    refresh:
      expiration:
        secs: 1296000 # 15 days
      cookie:
        name: refreshToken
        path: /auth/refresh-token
    access:
      expiration:
        secs: 1800 # 30 minutes
      cookie:
        name: accessToken
        path: /

      request:
        email:
          verification:
            secs: 86400 # 1 day todo: add to docs this change ( initiallly was 5 minutes)
          password:
            reset:
              secs: 1800 # 30 minutes
error:
  messages:
    system:
      unexpected: "Unexpected error, please try again later"
    user:
      not-found: "User not found"
      email-not-verified: "Email not verified, please check your email"
      updating-password:
        password-not-match: "Your current password not matches"
      login:
        invalid-credentials: "Invalid credentials"
      unique:
        username: "Username already exists"
        email: "Email already exists"
      invalid:
        email: "Invalid email"
        id:
          null-val: "Id cannot be null"
        username:
          blank: "Username cannot be blank"
        password:
          length:
            tooShort: "Password must be at least 8 characters long"
        roles:
          empty: "A user must have at least one role"

error:
  messages:
    system:
      unexpected: "Unexpected error, please try again later"
    user:
      not-found: "User not found"
      email-not-verified: "Email not verified, please check your email"
      updating-password:
        password-not-match: "Your current password not matches"
      login:
        invalid-credentials: "Invalid credentials"
      unique:
        username: "Username already exists"
        email: "Email already exists"
      invalid:
        email: "Invalid email"
        id:
          null-val: "Id cannot be null"
        username:
          length: "Username length must be between 3 & 20 ( included )"
        password:
          length:
            tooShort: "Password must be at least 8 characters long"
        roles:
          empty: "A user must have at least one role"


controller:
  base: /api/v1
  authentication:
    core: ${controller.base}/auth
    signup: ${controller.authentication.core}/signup
    login: ${controller.authentication.core}/login
    verify-email: ${controller.authentication.core}/verify-email
    request-reset-password: ${controller.authentication.core}/request-reset-password
    reset-password: ${controller.authentication.core}/password
    refresh-access-token: ${controller.authentication.core}/refresh-token

  user:
    core: ${controller.base}/user
    pagination:
      all: ${controller.user.core}/all

    account:
      core: ${controller.user.core}/account
      request:
        core: ${controller.user.account.core}/request
        delete: ${controller.user.account.request.core}/delete
        update-email: ${controller.user.account.request.core}/update-email
      update:
        core: ${controller.user.account.core}/update
        username: ${controller.user.account.update.core}/username
        password: ${controller.user.account.update.core}/password
        email: ${controller.user.account.update.core}/email

web-front:
  core: http://localhost:4200
  path:
    email-verification: ${web-front.core}/auth/verification-email?token={token}
    reset-password: ${web-front.core}/auth/reset-password?token={token}
    delete-account: ${web-front.core}/me/delete-account?token={token}
    update-email: ${web-front.core}/me/update-email?token={token}

