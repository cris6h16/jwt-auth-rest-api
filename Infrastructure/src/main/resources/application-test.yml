spring:

  application:
    name: restful-api-jwt

  datasource:
    url: jdbc:postgresql://localhost:5432/restful-api-jwt
    driver-class-name: org.postgresql.Driver
    username: cris6h16
    password: 12345678
    hikari:
      schema: dev

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  # My ISP is blocking port 587, so I have to use port 465
  #  mail:
  #    host: smtp.gmail.com
  #    port: 587
  #    username: ${MAIL_USER}
  #    password: ${MAIL_PASS}
  #    protocol: smtp
  #    properties:
  #      mail:
  #        debug: true
  #        transport:
  #          protocol: smtp
  #        smtp:
  #          auth: true
  #          starttls:
  #            enable: true
  #            required: true

  mail:
    host: smtp.gmail.com
    port: 465
    username: ${MAIL_USER}
    password: ${MAIL_PASS}
    protocol: smtp
    properties:
      mail:
        smtp:
          ssl:
            enable: true
            trust: smtp.gmail.com
            checkserveridentity: true
        debug: false
  data:
    redis:
      host: localhost
      port: 6379
      ttl:
        minutes: 5

server:
  port: 8080
  error:
    include-message: never
    include-exception: off
    include-stacktrace: never
  ssl:
    key-store: classpath:cris6h16.p12
    key-store-password: ${KEY_STORE_PASS}
    key-store-type: PKCS12
    key-alias: cris6h16
    enabled: true

logging:
  level:
    root: debug
    org.cris6h16.Config.SpringBoot.Security.Filters.JwtAuthenticationFilter: debug
  logback:
    rollingpolicy:
      file-name-pattern: ./logs/restful-api-jwt.%d{yyyy-MM-dd}.%i.log
      max-file-size: 10MB
      max-history: 30  # 30 days
      total-size-cap: 1GB  # limit for all
      clean-history-on-start: true




jwt:
  secret:
    key: 123456789987654321123456789987654321123456789
  token:
    refresh:
      expiration:
        secs: 1296000 # 15 days
      cookie:
        name: refreshToken
        path: /auth/refresh-token
    access:
      expiration:
        secs: 1800 # 30 minutes
      cookie:
        name: accessToken
        path: /

      request:
        email:
          verification:
            secs: 86400 # 1 day todo: add to docs this change ( initiallly was 5 minutes)
          delete-account:
            secs: 1800 # 30 minutes
          update-email:
            secs: 1800 # 30 minutes
          reset:
            password:
              secs: 1800 # 30 minutes
error:
  messages:
    system:
      unexpected: "Unexpected error, please try again later"
    user:
      not-found: "User not found"
      email-not-verified: "Email not verified, please check your email"
      updating-password:
        password-not-match: "Your current password not matches"
      login:
        invalid-credentials: "Invalid credentials"
      unique:
        username: "Username already exists"
        email: "Email already exists"
      invalid:
        email: "Invalid email"
        id:
          null-val: "Id cannot be null"
        username:
          length: "Username length must be between 3 & 20 ( included )"
        password:
          length:
            tooShort: "Password must be at least 8 characters long"
        roles:
          empty: "A user must have at least one role"


controller:
  base: /api/v1
  authentication:
    core: ${controller.base}/auth
    signup: ${controller.authentication.core}/signup
    login: ${controller.authentication.core}/login
    verify-email: ${controller.authentication.core}/verify-email
    request-reset-password: ${controller.authentication.core}/request-reset-password
    reset-password: ${controller.authentication.core}/password
    refresh-access-token: ${controller.authentication.core}/refresh-token

  user:
    core: ${controller.base}/user
    pagination:
      all: ${controller.user.core}/all
    account:
      core: ${controller.user.core}/account
      request:
        core: ${controller.user.account.core}/request
        delete: ${controller.user.account.request.core}/delete
        update-email: ${controller.user.account.request.core}/update-email
      update:
        core: ${controller.user.account.core}/update
        username: ${controller.user.account.update.core}/username
        password: ${controller.user.account.update.core}/password
        email: ${controller.user.account.update.core}/email

web-front:
  core: http://localhost:4200
  path:
    email-verification: ${web-front.core}/auth/verification-email?token={token}
    reset-password: ${web-front.core}/auth/reset-password?token={token}
    delete-account: ${web-front.core}/me/delete-account?token={token}
    update-email: ${web-front.core}/me/update-email?token={token}